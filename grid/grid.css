html {
    box-sizing: border-box;
    font-size: 16px;
    font-family: sans-serif;
    scroll-behavior: smooth; /* anima el scroll */
  }

  *,
  *::after,
  *::before {
    box-sizing: inherit;
  }

  a[href="#top"] {
    margin: 1rem;
    display: block;
    font-size: 2rem;
    text-align: center;
    text-decoration: none;
  }

  p {
    margin: 0;
  }

  h2 {
    margin-top: 50vh;
    text-align: center;
  }

  img {
    margin: auto;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .menu {
    margin-bottom: 100vh;
    font-size: 125%;
  }

  .menu li {
    margin-bottom: 1rem;
  }

  .container {
    margin: 0 auto;
    width: 80%;
    height: 80vh;
    background-color: #222;
    border: medium solid #000;
  }

  .item {
    padding: 1rem;
    font-size: 1.25rem;
    background-color: #666;
    border: medium solid #999;
  }

  .sub-item{
    padding: 1rem;
    font-size: 1.25rem;
    background-color: #ddd;
    border: medium solid #ccc;
  }

  .grid-explicit{
    display: grid;

    /*grid 3cX3r
    grid-template-rows: 2rem 20vh 30%;
    grid-template-columns: 50% 100px 1fr; */

    /* grid 5cx4r
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(4, 1fr); */

   /*  grid 4cx5r */
   grid-template-columns: 20% repeat(2, 30%) 20%;
   grid-template-rows: repeat(5, auto);

   /* Separacion entre casillas
   column-gap: 4rem;
   row-gap: 2rem;
   gap: 1vh 1vw; */
  }

  /* Cambiar el Orden de un elemento en el grid y Crecer celdas */
  .grid-explicit .item:nth-child(10){
    color: red;

   /* grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 3;
    grid-column-end: 5;

    grid-row: 2/3;
    grid-column: 3/5; */

    grid-area: 2/3/3/5;
  }

  .grid-explicit .item:nth-child(12){
    color: chartreuse;
    grid-row: span 2;
    grid-column: span 3;
  }

  .grid-explicit .item:nth-child(15){
    color: blueviolet;
    grid-row: 1 / span 2;
    grid-column: 1 / span 2;
  }

  .grid-line-names{
    display: grid;
    grid-template-columns: repeat(3, auto);
    grid-template-rows: repeat(3, auto);

    grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
    grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4];
  }

  .grid-line-names .item:nth-child(3){
    color: cyan;
    grid-row: linea-r3/linea-r4;
    grid-column: linea-c1/linea-c4;
  }

  .grid-areas{
    display: grid;

    /* grid 2cX3r */
    grid-template-columns: 1fr 200px;
    grid-template-rows: 100px 1fr 60px;

    /* defino nombres de las areas y el espacio que ocupan */
    grid-template-areas: 
      "header header"
      "content sidebar"
      "footer footer";
  }
 
  .header{
    grid-area: header;
  }
 .content{
  grid-area: content;
 }
 .sidebar{
  grid-area: sidebar;
 }
 .footer{
  grid-area: footer;
 }

 .grid-implicit{
  width: 40%;
  display: inline-grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 100px);
 }

 .grid-flow{
  display: grid;

  /* Grid 5cX3r */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 120px);

  /* flujo */
  grid-auto-flow: row;
  grid-auto-rows: 100px;

  grid-auto-flow: column;
  grid-auto-columns: 80px;
 }

 .grid-flow-dense{
  display: grid
  ;
  /* grid 5cx4r */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 100px);

  grid-auto-flow: column dense; /* Direccion del grid y si ocupa los espacios libres */
  grid-auto-flow: row dense;
 }

 .grid-flow-dense .item:nth-child(9){
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
 }
 
 .grid-flow-dense .item:nth-child(11){
  color: cyan;
  grid-row: span 3;
  grid-column: 5/span 3;
 }

 .grid-layers{
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4,1fr);
 }

 .grid-layers .item:nth-child(1){
  background-color: yellow;
  grid-column: 1/3;
  grid-row: 1/3;
 }
 .grid-layers .item:nth-child(2){
  background-color: rgb(75, 207, 250);
  grid-column: 3/5;
  grid-row: 1/3;
 }
 .grid-layers .item:nth-child(3){
  background-color: rgb(53, 244, 53);
  grid-column: 1/3;
  grid-row: 3/5; 
 }
 .grid-layers .item:nth-child(4){
  background-color:orange;
  grid-column: 3/5;
  grid-row: 3/5;
 }
 .grid-layers .item:nth-child(5){
  background-color:purple;
  opacity: .75;
  grid-area: 2/2/4/4;
 }

 .grid-order{
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);

  grid-auto-flow: column;
 }

 .grid-order .item:nth-child(1){
  /* Todos los items grid default son 0,  valores negativos y positivos */
  order: 1;
 }
 .grid-order .item:nth-child(2){
  order: 2;
 }
 .grid-order .item:nth-child(5){
  order: -1;
 }

 .grid-align{
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  
  justify-items: center; /* stretch, start, end, center */
  align-items: center; /* stretch, start, end, center */
 }

 .grid-align .item:nth-child(4){
  justify-self: start;
  align-self: start;
 }

 .grid-align-tracks{
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);

  justify-content: space-evenly; /* start, center, end, space-between, space-around, space-evenly  */
  align-content: space-evenly; /* start, center, end, space-between, space-around, space-evenly  */
 }

 .grid-min-max{
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(100px, 200px)); /* Creo y a la vez defino el ANCHO max y min de la grid */
  grid-template-columns: repeat(4, minmax(min-content, max-content)); 
 }

 .grid-repeat{
  display: grid;
  grid-template-columns: repeat(1, 10% 20% 30% 40%); /* Creamos patrones en columnas */
  grid-template-rows: repeat(2, 70px 140px); /* Creamos patrones en filas */
}

.grid-dynamics{
  display: grid;
  grid-template-columns: repeat(4, 100px); 
  /* auto-fill Rellena la grid con tracks generados dinamicamente */
  grid-template-columns: repeat(auto-fill, minmax(100px,1fr));
  /* auto-fit ajusta la grid con los tracks |elementos ya existentes, se comporta como (flex-grow y flex-shrink) */
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-responsive{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1vw;
}

.grid-nested{
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.grid{
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.subgrid{
    /* Para que la característica de subgrid funcione es necesario hacer los siguiente:
    1) Definir explícitamente el tamaño que ocupará el elemento que aplicará subgrid dentro del contenedor padre grid, es decir definir sus propiedades grid-column y grid-row.*/
    grid-column: span 3;
    grid-row: 1/3; 
    /* 2) Aplicar display grid al elemento que aplicará subgrid. */
    display: grid;
    /* 3) Aplicar el valor de subgrid a las columnas, a las filas o ambas depende de cómo se requiera */
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
}

.sub-item2{
  grid-column: span 3;
  grid-row: 1/3;
  display: grid;
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}
